const _0x105307 = _0x4029;
(function(_0x40e71a, _0x317f58) { const _0x151e5b = _0x4029,
        _0x21d873 = _0x40e71a(); while (!![]) { try { const _0x47be12 = -parseInt(_0x151e5b(0x189)) / 0x1 + parseInt(_0x151e5b(0x132)) / 0x2 * (-parseInt(_0x151e5b(0x157)) / 0x3) + -parseInt(_0x151e5b(0x144)) / 0x4 + parseInt(_0x151e5b(0x158)) / 0x5 + parseInt(_0x151e5b(0x177)) / 0x6 + parseInt(_0x151e5b(0x167)) / 0x7 + parseInt(_0x151e5b(0x171)) / 0x8; if (_0x47be12 === _0x317f58) break;
            else _0x21d873['push'](_0x21d873['shift']()); } catch (_0x5a0e6e) { _0x21d873['push'](_0x21d873['shift']()); } } }(_0x1e70, 0xb2bd0));

function _0x1e70() { const _0x4f9020 = ['beaconCluster2', 'latEnd', 'imuData', 'cal\x20costTime', 'beaconCluster1', 'createBandPassFilter', 'forEach', 'filteredSignalList', 'acousticC64Flag', 'lat', 'getSingleLeftFromArrayStatic', 'worker\x20init', 'acousticImuStaticFlag', 'max', 'timestamp', 'imuSteps', 'locType', '497282bAbXvB', 'tdoa', 'calculateLocation', 'fuse', 'index', 'calculateLocationC64', 'lngEnd', '一维定位', 'acloc', 'calculateCoordinate', '苏州定位', 'location', 'getDistance', 'imuAlpha', 'log', 'beaconCluster2D', 'frameBuffer_stadium', 'chartData', '4493584WIjElu', 'dataType', 'imuMaxDrift', 'p22', 'getTrack', 'totalLength', '一秒内tdoa小于5个', 'onMessage', 'getSingleLeftFromList', 'getSteps', 'tdoaInfo', 'stringify', 'acousticSmoothFlag', 'distances1', 'length', 'setting', 'frqDetect1', 'signalMaxAndIndex', '一维定位三基站', '3KbPGZs', '4085825zTavuW', 'acousticMapLimitFlag', 'clear', 'meanList', 'acousticHeight', 'distances_nanchang', 'pdr_track', 'latStart', 'getPdr', 'distances2', '二维定位', 'startPosition', '位置误差太大', 'aclocPosition', 'slice', '7830907nbXbFM', 'floor', 'getTime', '体育馆定位', 'exkalmandme', 'filter', 'beaconCluster1D', 'splice', 'leftLength', 'console', '7911192ZAqpGJ', 'pdr', 'fused-track', 'clusterIndex', 'coordinate', 'data', '2002410lMBwkW', 'postMessage', 'suzhou', 'updateSettings', 'trunc', 'getTDOAInfoWithList', 'abs', 'lngStart', 'frameBuffer_suzhou', 'calculateDistanceThreeBeacon', 'inputDataList', 'lng', 'imu', 'map', 'push', 'frameBuffer2d', 'apply', 'min', '1154351lUSvLT', '一秒内未检测到tdoa信号', 'getSingleFromList', 'code', 'isStatic', 'getTimeDelta', 'frameBuffer1DThreeBeacon', 'acoOnly'];
    _0x1e70 = function() { return _0x4f9020; }; return _0x1e70(); }

function _0x4029(_0x4c698c, _0x5cdd86) { const _0x1e7094 = _0x1e70(); return _0x4029 = function(_0x402922, _0x3c5c7b) { _0x402922 = _0x402922 - 0x126; let _0x56f53e = _0x1e7094[_0x402922]; return _0x56f53e; }, _0x4029(_0x4c698c, _0x5cdd86); }
import _0x138e4b from './fftUtil';
let pdr = _0x138e4b[_0x105307(0x160)](),
    fuse = _0x138e4b['getFuse'](),
    startPosition = { 'timestamp': 0x0, 'x': 0x0, 'y': 0x0 },
    lastPosition = { 'timestamp': 0x0, 'x': 0x0, 'y': 0x0 },
    stepList = [],
    imuDataList = [],
    alpha = 0x0,
    imuSteps = 0.5,
    imuMaxDrift = 0x3,
    acousticMaxDrift = 2.5,
    acousticC64Flag = 0x0,
    acousticHeight = 0x2,
    acousticSmoothFlag = 0x0,
    acousticMapLimitFlag = 0x0,
    acousticImuStaticFlag = 0x0,
    aclocTrack = [],
    track = [],
    fakeAclocTrack = ![],
    isStatic = ![];
if (console[_0x105307(0x140)]) { var old = console[_0x105307(0x140)]; let that = this;
    console['log'] = function() { const _0x4456fb = _0x105307;
        worker[_0x4456fb(0x178)]({ 'code': _0x4456fb(0x170), 'content': JSON['stringify'](arguments) }), old[_0x4456fb(0x187)](this, arguments); }; }
console['log'](_0x105307(0x12c));
const beaconCluster1 = new _0x138e4b(_0x105307(0x195)),
    beaconCluster2 = new _0x138e4b(_0x105307(0x191));
let settings1 = null,
    settings2 = null;
const beaconCluster1D = new _0x138e4b('beaconCluster1D');
let settings1D = null;
const beaconCluster2D = new _0x138e4b(_0x105307(0x141));
let settings2D = null,
    frqDetect1 = new _0x138e4b(_0x105307(0x154)),
    frqDetect2 = new _0x138e4b('frqDetect2'),
    frqDetect3 = new _0x138e4b('frqDetect3'),
    frqDetectList = [frqDetect1, frqDetect2, frqDetect3],
    durationTime = 0.03,
    sampleFrq = 0xbb80,
    vMaxTh = 0.8,
    vRatioTh = 0.3,
    maxRatioTh = 0x19,
    SingleDetectList = [],
    frequenceSetting1 = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': Math[_0x105307(0x168)](durationTime * sampleFrq) - 0x1, 'maxRatioTh': maxRatioTh, 'frequencyStart': 0x4268, 'frequencyEnd': 0x4a38, 'durationTime': durationTime, 'timeInterval': 0.15 },
    frequenceSetting2 = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': Math[_0x105307(0x168)](durationTime * sampleFrq) - 0x1, 'maxRatioTh': maxRatioTh, 'frequencyStart': 0x4a38, 'frequencyEnd': 0x5208, 'durationTime': durationTime, 'timeInterval': 0.15 },
    frequenceSetting3 = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': 0x7ff, 'maxRatioTh': Math['floor'](durationTime * sampleFrq) - 0x1, 'frequencyStart': 0x5208, 'frequencyEnd': 0x59d8, 'durationTime': durationTime, 'timeInterval': 0.15 },
    frequenceSettingList = [frequenceSetting1, frequenceSetting2, frequenceSetting3];
frqDetectList['forEach']((_0x4fca44, _0x321b7) => { const _0x136281 = _0x105307;
    _0x4fca44[_0x136281(0x17a)](frequenceSettingList[_0x321b7]); });
let frqDetect1_suzhou = new _0x138e4b('frqDetect1_suzhou'),
    frqDetect2_suzhou = new _0x138e4b('frqDetect2_suzhou'),
    frqDetect3_suzhou = new _0x138e4b('frqDetect3_suzhou'),
    frqDetectList_suzhou = [frqDetect1_suzhou, frqDetect2_suzhou, frqDetect3_suzhou],
    frequenceSetting1_suzhou = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': Math['floor'](durationTime * sampleFrq) - 0x1, 'maxRatioTh': maxRatioTh, 'frequencyStart': 0x4268, 'frequencyEnd': 0x4a38, 'durationTime': durationTime, 'timeInterval': 0.15 },
    frequenceSetting2_suzhou = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': Math['floor'](durationTime * sampleFrq) - 0x1, 'maxRatioTh': maxRatioTh, 'frequencyStart': 0x4a38, 'frequencyEnd': 0x5208, 'durationTime': durationTime, 'timeInterval': 0.15 },
    frequenceSetting3_suzhou = { 'vMaxTh': vMaxTh, 'vRatioTh': vRatioTh, 'pMaxTh': Math['floor'](durationTime * sampleFrq) - 0x1, 'maxRatioTh': maxRatioTh, 'frequencyStart': 0x5208, 'frequencyEnd': 0x59d8, 'durationTime': durationTime, 'timeInterval': 0.15, 'totalLength': 0x14 },
    frequenceSettingList_suzhou = [frequenceSetting1_suzhou, frequenceSetting2_suzhou, frequenceSetting3_suzhou];
frqDetectList_suzhou[_0x105307(0x127)]((_0x25f922, _0x5d8b2d) => { const _0x1bda9d = _0x105307;
    _0x25f922[_0x1bda9d(0x17a)](frequenceSettingList_suzhou[_0x5d8b2d]); });
let locations1 = [
        [0x5, 0x12, 1.5],
        [0x0, 0x12, 1.5],
        [0x0, 0x0, 1.5],
        [0xa, 0x0, 1.5],
        [0xa, 0x12, 1.5]
    ],
    locations2 = [
        [0xf, 0x12, 1.5],
        [0x14, 0x12, 1.5],
        [0x14, 0x0, 1.5],
        [0xa, 0x0, 1.5],
        [0xa, 0x12, 1.5]
    ],
    locations3 = [
        [0x19, 0x12, 1.5],
        [0x14, 0x12, 1.5],
        [0x14, 0x0, 1.5],
        [0x1e, 0x0, 1.5],
        [0x1e, 0x12, 1.5]
    ],
    locationSettingList = [getLocationSetting(locations1), getLocationSetting(locations2), getLocationSetting(locations3)],
    locationSettingList_suzhou = [],
    signalFilterParameterList = [
        [0xbb80, 0x20, 0x413c, 0x4394],
        [0xbb80, 0x20, 0x490c, 0x4b64],
        [0xbb80, 0x20, 0x50dc, 0x5334]
    ],
    signalFilterList = [];
signalFilterParameterList[_0x105307(0x127)](_0x3da948 => { const _0x1e0a67 = _0x105307; let _0x3e6bda = _0x138e4b[_0x1e0a67(0x126)](_0x3da948[0x0], _0x3da948[0x1], _0x3da948[0x2], _0x3da948[0x3]);
    signalFilterList[_0x1e0a67(0x185)](_0x3e6bda); });
let qb2123filter = _0x138e4b[_0x105307(0x126)](0xbb80, 0x20, 0x526c, 0x5974),
    qb1719filter = _0x138e4b['createBandPassFilter'](0xbb80, 0x20, 0x4268, 0x4844),
    qb1921filter = _0x138e4b[_0x105307(0x126)](0xbb80, 0x20, 0x4a38, 0x5208),
    chirpFilterParameterList = [
        [0xbb80, 0x20, 0x43f8, 0x48a8],
        [0xbb80, 0x20, 0x4bc8, 0x5078],
        [0xbb80, 0x20, 0x5398, 0x5848]
    ],
    chirpFilterList = [];
chirpFilterParameterList['forEach'](_0x219647 => { const _0x57fe99 = _0x105307; let _0x286faf = _0x138e4b[_0x57fe99(0x126)](_0x219647[0x0], _0x219647[0x1], _0x219647[0x2], _0x219647[0x3]);
    chirpFilterList[_0x57fe99(0x185)](_0x286faf); });
let chirpFilterParameterList_suzhou = [
        [0xbb80, 0x20, 0x43f8, 0x48a8],
        [0xbb80, 0x20, 0x4bc8, 0x5078],
        [0xbb80, 0x20, 0x5398, 0x5848]
    ],
    chirpFilterList_suzhou = [];
chirpFilterParameterList_suzhou[_0x105307(0x127)](_0x255f62 => { const _0xc28e4e = _0x105307; let _0x572769 = _0x138e4b['createBandPassFilter'](_0x255f62[0x0], _0x255f62[0x1], _0x255f62[0x2], _0x255f62[0x3]);
    chirpFilterList_suzhou[_0xc28e4e(0x185)](_0x572769); });
let inputListTemp = [],
    needJudgeNumber = !![],
    chirpNum = -0x1,
    inputListStore = [],
    isTimeAligned = ![],
    timeGap = 0.33,
    timeOffset = -0x1;

function oneDProcessThreeBeacon(_0x48cfc3) { const _0x449d1d = _0x105307; let _0x260fd9 = new Date()[_0x449d1d(0x169)]();
    Array['prototype']['push'][_0x449d1d(0x187)](SingleDetectList, _0x48cfc3); let _0x2ad1d6 = [],
        _0x141cbd = []; if (SingleDetectList[_0x449d1d(0x152)] > 0x2000 * 0x4) { let _0x350ecc = new Array(SingleDetectList[_0x449d1d(0x152)]); for (let _0x1342c1 = 0x0; _0x1342c1 < SingleDetectList[_0x449d1d(0x152)]; _0x1342c1++) { _0x350ecc[_0x1342c1] = qb1921filter['filter'](SingleDetectList[_0x1342c1]); } let _0xa3c409 = beaconCluster1['detectSingleFrequencyWithList'](_0x350ecc);
        console[_0x449d1d(0x140)](_0x449d1d(0x174), _0xa3c409); let _0xa54698 = new Array(SingleDetectList['length']); for (let _0x1aef90 = 0x0; _0x1aef90 < SingleDetectList['length']; _0x1aef90++) { _0xa54698[_0x1aef90] = qb1719filter[_0x449d1d(0x16c)](SingleDetectList[_0x1aef90]); }
        _0x2ad1d6 = beaconCluster1['getTDOAInfoWithList'](_0xa54698); let _0x50744b = new Array(SingleDetectList['length']); for (let _0x3b18c1 = 0x0; _0x3b18c1 < SingleDetectList['length']; _0x3b18c1++) { _0x50744b[_0x3b18c1] = qb2123filter[_0x449d1d(0x16c)](SingleDetectList[_0x3b18c1]); }
        _0x141cbd = beaconCluster2['getTDOAInfoWithList'](_0x50744b), SingleDetectList = []; }
    worker[_0x449d1d(0x178)]({ 'code': _0x449d1d(0x14e), 'tdoaInfo': _0x2ad1d6, 'tdoaInfo2': _0x141cbd }); let _0x40f799 = _0x138e4b[_0x449d1d(0x180)](_0x2ad1d6, _0x141cbd, settings1, settings2, 0x1),
        _0x1b58f3 = settings1[_0x449d1d(0x17e)],
        _0x5210d8 = settings1[_0x449d1d(0x138)],
        _0xb76fef = settings1[_0x449d1d(0x15f)],
        _0x4526af = settings1['latEnd'],
        _0x515513 = settings2[_0x449d1d(0x17e)],
        _0x4ba897 = settings2[_0x449d1d(0x138)],
        _0x1343f1 = settings2[_0x449d1d(0x15f)],
        _0x48886b = settings2[_0x449d1d(0x192)],
        _0x32184d = [],
        _0x389581 = [];
    _0x40f799[_0x449d1d(0x151)]['forEach'](_0x2c08f2 => { const _0x348224 = _0x449d1d;
        _0x32184d[_0x348224(0x185)](_0x138e4b[_0x348224(0x13b)](_0x1b58f3, _0x5210d8, _0xb76fef, _0x4526af, _0x2c08f2 / settings1[_0x348224(0x149)])); }), _0x40f799[_0x449d1d(0x161)]['forEach'](_0x339b03 => { const _0x97ba09 = _0x449d1d;
        _0x389581['push'](_0x138e4b[_0x97ba09(0x13b)](_0x515513, _0x4ba897, _0x1343f1, _0x48886b, _0x339b03 / settings2[_0x97ba09(0x149)])); }), worker[_0x449d1d(0x178)]({ 'code': _0x449d1d(0x175), 'coordinate1': _0x32184d, 'coordinate2': _0x389581, 'timeStamp': _0x260fd9 }), worker['postMessage']({ 'code': _0x449d1d(0x15d), 'distances1': _0x40f799[_0x449d1d(0x151)], 'distances2': _0x40f799['distances2'], 'timeStamp': _0x260fd9 }); }
let lastCoordinate1D = null;

function oneDProcess(_0xa730a2) { const _0x36848c = _0x105307; let _0x1883d8 = new Date()[_0x36848c(0x169)](),
        _0x1fcd25 = beaconCluster1D[_0x36848c(0x17c)](_0xa730a2);
    worker[_0x36848c(0x178)]({ 'code': _0x36848c(0x14e), 'tdoaInfo': _0x1fcd25 }); let _0x31faa4 = beaconCluster1D[_0x36848c(0x13e)](beaconCluster1D['getTimeDelta'](_0x1fcd25));
    _0x31faa4 != null && _0x31faa4[_0x36848c(0x152)] > 0x0 && ((_0x31faa4[0x0] > settings1D[_0x36848c(0x149)] || _0x31faa4[0x0] < 0x0) && (_0x31faa4 = null), lastCoordinate1D != null && (Math[_0x36848c(0x17d)](_0x31faa4[0x0] - lastCoordinate1D[0x0]) > acousticMaxDrift && (_0x31faa4 = null))), _0x31faa4 != null && _0x31faa4[_0x36848c(0x152)] > 0x0 && (lastCoordinate1D = _0x31faa4), worker[_0x36848c(0x178)]({ 'code': _0x36848c(0x13d), 'location': _0x31faa4, 'type': '1D', 'timeStamp': _0x1883d8 }); }

function avg(_0x405fc7) { const _0x202d9e = _0x105307; let _0x2d3e6e = 0x0; for (var _0x4ea16d = 0x0; _0x4ea16d < _0x405fc7[_0x202d9e(0x152)]; _0x4ea16d++) { _0x2d3e6e += _0x405fc7[_0x4ea16d]; } return _0x2d3e6e / _0x405fc7[_0x202d9e(0x152)]; };
let lastCoordinate = null,
    maNumber = 0x5,
    outputLocList = [];

function twoDProcess(_0x23323c, _0x38cb82) { const _0x3b3989 = _0x105307; let _0x141cfa = new Date()[_0x3b3989(0x169)](),
        _0x22a2c3 = beaconCluster2D[_0x3b3989(0x17c)](_0x23323c);
    worker[_0x3b3989(0x178)]({ 'code': _0x3b3989(0x14e), 'tdoaInfo': _0x22a2c3 }); let _0x3e70c0 = [];
    _0x22a2c3['forEach'](_0x32bceb => { const _0x2fc9b7 = _0x3b3989;
        _0x32bceb[_0x2fc9b7(0x133)] > 0x0 && _0x3e70c0[_0x2fc9b7(0x185)](_0x32bceb['tdoa']); }); let _0x3846a6 = [
        [0x64, -0x1],
        [0x64, -0x1],
        [0x64, -0x1]
    ]; for (let _0x42b2f1 = 0x0; _0x42b2f1 < _0x38cb82[_0x3b3989(0x152)]; _0x42b2f1++) { let _0x55b749 = _0x38cb82[_0x42b2f1]; for (let _0x37b6d2 = 0x0; _0x37b6d2 < 0x3; _0x37b6d2++) { _0x3846a6[_0x37b6d2][0x0] = Math[_0x3b3989(0x188)](_0x3846a6[_0x37b6d2][0x0], _0x55b749[_0x37b6d2]), _0x3846a6[_0x37b6d2][0x1] = Math[_0x3b3989(0x12e)](_0x3846a6[_0x37b6d2][0x1], _0x55b749[_0x37b6d2]); } } let _0x38c5e3 = { 'period': 1.002, 'beaconsLocation': _0x38cb82, 'locations': _0x38cb82, 'xRange': _0x3846a6[0x0], 'yRange': _0x3846a6[0x1], 'zRange': _0x3846a6[0x2], 'totalLength': Math[_0x3b3989(0x12e)](_0x3846a6[0x0][0x1] - _0x3846a6[0x0][0x0], _0x3846a6[0x1][0x1] - _0x3846a6[0x1][0x0], _0x3846a6[0x2][0x1] - _0x3846a6[0x2][0x0]), 'lastCoordinate': lastCoordinate, 'radius': acousticMaxDrift, 'interval': 0.15, 'precision': 0.05, 'acousticMapLimitFlag': acousticMapLimitFlag },
        _0x65f490 = new Date()[_0x3b3989(0x169)](),
        _0x8c8d6d = null;
    acousticC64Flag == 0x1 ? _0x8c8d6d = _0x138e4b[_0x3b3989(0x137)](_0x3e70c0, _0x38c5e3) : _0x8c8d6d = _0x138e4b[_0x3b3989(0x134)](_0x3e70c0, _0x38c5e3);
    _0x8c8d6d != null && (lastCoordinate = _0x8c8d6d); if (acousticSmoothFlag == 0x1) { if (_0x8c8d6d != null) { outputLocList[_0x3b3989(0x185)](JSON['parse'](JSON[_0x3b3989(0x14f)](_0x8c8d6d))); let _0x1e0d2c = outputLocList[_0x3b3989(0x184)](_0xb2d876 => _0xb2d876[0x0]),
                _0x580e23 = outputLocList[_0x3b3989(0x184)](_0x27d0ff => _0x27d0ff[0x1]);
            console[_0x3b3989(0x140)]('xList', _0x1e0d2c), _0x8c8d6d[0x0] = avg(_0x1e0d2c), _0x8c8d6d[0x1] = avg(_0x580e23), outputLocList[_0x3b3989(0x152)] >= maNumber && outputLocList[_0x3b3989(0x16e)](0x0, 0x1); } }
    new Date()[_0x3b3989(0x169)]() - _0x65f490 > 0x1 && console[_0x3b3989(0x140)](_0x3b3989(0x194), new Date()['getTime']() - _0x65f490), worker['postMessage']({ 'code': _0x3b3989(0x13d), 'location': _0x8c8d6d, 'timeStamp': _0x141cfa }); }

function statidumProcess(_0x39da72) { const _0x49998d = _0x105307; let _0xd42bb9 = new Date()['getTime']();
    inputListTemp['push'][_0x49998d(0x187)](inputListTemp, _0x39da72); if (inputListTemp['length'] < sampleFrq) return; let _0x23cc05 = sampleFrq - inputListStore[_0x49998d(0x152)];
    console[_0x49998d(0x140)](_0x49998d(0x16f), _0x23cc05), inputListStore['push'][_0x49998d(0x187)](inputListStore, inputListTemp['slice'](0x0, _0x23cc05)), inputListTemp = inputListTemp[_0x49998d(0x166)](_0x23cc05); let _0x374dd4 = getJudgedNumber(inputListStore, signalFilterParameterList, 0x1),
        _0x56ab77 = getJudgedNumber(inputListStore, chirpFilterParameterList, 0x2);
    console[_0x49998d(0x140)](_0x374dd4[_0x49998d(0x155)], _0x56ab77[_0x49998d(0x155)]); let _0x4e27f5 = inputListStore['slice'](0x0);
    inputListStore = []; if (_0x374dd4[_0x49998d(0x155)][_0x49998d(0x136)] == _0x56ab77[_0x49998d(0x155)]['index']) chirpNum = _0x374dd4[_0x49998d(0x155)][_0x49998d(0x136)];
    else { if (_0x374dd4[_0x49998d(0x155)][_0x49998d(0x136)] == 0x0 && _0x56ab77[_0x49998d(0x155)][_0x49998d(0x136)] == 0x2) chirpNum = 0x2;
        else { let _0x5726b7 = []; for (let _0x5ca5b5 = 0x0; _0x5ca5b5 < _0x374dd4['meanList']['length']; _0x5ca5b5++) { _0x5726b7[_0x49998d(0x185)](_0x374dd4[_0x49998d(0x15b)][_0x5ca5b5] + _0x56ab77['meanList'][_0x5ca5b5]); } let _0x58a6f4 = getMaxAndIndex(_0x5726b7);
            chirpNum = _0x58a6f4['index']; } }
    console[_0x49998d(0x140)](chirpNum); let _0x55dd75 = frqDetectList[chirpNum][_0x49998d(0x17c)](_0x56ab77[_0x49998d(0x128)][chirpNum]);
    _0x55dd75 = _0x55dd75[_0x49998d(0x16c)](_0x2bef9c => _0x2bef9c[_0x49998d(0x133)] > 0x0), console['log'](_0x49998d(0x14e), _0x55dd75); if (_0x55dd75[_0x49998d(0x152)] < 0x5) { console[_0x49998d(0x140)](_0x49998d(0x14a)); return; } if (!isTimeAligned) { if (_0x55dd75[_0x49998d(0x152)] == 0x0) { console[_0x49998d(0x140)](_0x49998d(0x18a)); return; } if (_0x55dd75[_0x49998d(0x152)] < 0x5) { console[_0x49998d(0x140)](_0x55dd75), console['log'](_0x49998d(0x14a)); return; } let _0x1f76b4 = 0x1; for (_0x1f76b4 = 0x1; _0x1f76b4 < _0x55dd75[_0x49998d(0x152)]; _0x1f76b4++) { let _0x2c1fa2 = _0x55dd75[_0x1f76b4][_0x49998d(0x133)],
                _0x4c9acb = _0x55dd75[_0x1f76b4 - 0x1][_0x49998d(0x133)]; if (_0x2c1fa2 - _0x4c9acb > timeGap) { timeOffset = fract(_0x2c1fa2), console[_0x49998d(0x140)]('时间对齐', timeOffset), inputListStore[_0x49998d(0x185)]['apply'](inputListStore, _0x4e27f5[_0x49998d(0x166)]((timeOffset - 0.1) * sampleFrq)), frqDetectList[_0x49998d(0x127)](_0x3f79ce => { const _0x1ae112 = _0x49998d;
                    _0x3f79ce[_0x1ae112(0x15a)](); }), isTimeAligned = !![]; break; } }
        _0x1f76b4 == _0x55dd75['length'] && !isTimeAligned && (isTimeAligned = !![]);
        isTimeAligned && console['log']('时间已经对齐'); return; } let _0x225848 = [];
    _0x55dd75['forEach'](_0x4e6a28 => { const _0x3d620f = _0x49998d;
        _0x4e6a28[_0x3d620f(0x133)] > 0x0 && _0x225848[_0x3d620f(0x185)](_0x4e6a28[_0x3d620f(0x133)]); }); let _0x2fa3ba = _0x138e4b[_0x49998d(0x134)](_0x225848, locationSettingList[chirpNum]);
    console[_0x49998d(0x140)]('location', _0x2fa3ba), _0x2fa3ba && _0x2fa3ba[0x3] < 0xa && worker[_0x49998d(0x178)]({ 'code': 'location', 'location': _0x2fa3ba, 'timeStamp': _0xd42bb9 }); }

function suzhouProcess(_0x2d15f9) { const _0x3c8e3d = _0x105307; let _0x2e5ef6 = new Date()[_0x3c8e3d(0x169)]();
    inputListTemp[_0x3c8e3d(0x185)]['apply'](inputListTemp, _0x2d15f9); if (inputListTemp[_0x3c8e3d(0x152)] < sampleFrq) return; let _0x4dd03a = sampleFrq - inputListStore[_0x3c8e3d(0x152)];
    console[_0x3c8e3d(0x140)]('leftLength', _0x4dd03a), inputListStore[_0x3c8e3d(0x185)]['apply'](inputListStore, inputListTemp['slice'](0x0, _0x4dd03a)), inputListTemp = inputListTemp[_0x3c8e3d(0x166)](_0x4dd03a); let _0x59c7bf = filterSignal_suzhou(inputListStore, chirpFilterParameterList),
        _0x475ec2 = inputListStore['slice'](0x0);
    inputListStore = []; let _0x2c95cd = [];
    frqDetectList_suzhou[_0x3c8e3d(0x127)]((_0xdee4fb, _0x2dd972) => { const _0x5518fe = _0x3c8e3d; let _0x120286 = _0xdee4fb[_0x5518fe(0x17c)](_0x59c7bf[_0x5518fe(0x128)][_0x2dd972]);
        _0x120286 = _0x120286['filter'](_0x3473ad => _0x3473ad[_0x5518fe(0x133)] > 0x0), _0x2c95cd[_0x5518fe(0x185)](_0x120286); }); let _0x434feb = [];
    _0x2c95cd['forEach']((_0xfeb7c9, _0x4a5cae) => { const _0x2e760a = _0x3c8e3d; if (_0x4a5cae == 0x0 || _0x4a5cae == 0x1) { let _0x1071fa = [];
            _0xfeb7c9[_0x2e760a(0x127)](_0x47b5a5 => { const _0x278d64 = _0x2e760a;
                _0x47b5a5[_0x278d64(0x133)] > 0x0 && _0x1071fa['push'](_0x47b5a5['tdoa']); }), console['log'](_0x4a5cae, _0x4a5cae, _0x1071fa); let _0x44626a = _0x1071fa['map']; for (let _0x132289 = 0x0; _0x132289 < _0x1071fa[_0x2e760a(0x152)]; _0x132289++) { let _0x593689 = _0x138e4b['calculateLocation']([_0x1071fa[_0x132289]], locationSettingList_suzhou[_0x4a5cae], _0x4a5cae);
                console[_0x2e760a(0x140)](_0x4a5cae, _0x4a5cae, _0x2e760a(0x13d), _0x593689); if (_0x593689 && _0x593689[0x3] < 0xa) _0x434feb[_0x2e760a(0x152)] > 0x0 ? _0x593689[0x3] < _0x434feb[0x0][0x3] && (_0x434feb[0x0] = _0x593689) : _0x434feb[_0x2e760a(0x185)](_0x593689);
                else _0x593689 && console['log'](_0x2e760a(0x164), _0x593689); } } else { if (_0x4a5cae == 0x2) { let _0x2508df = frqDetectList_suzhou[_0x4a5cae],
                    _0x4f0f97 = _0xfeb7c9;
                console[_0x2e760a(0x140)](_0x2e760a(0x147), _0x4f0f97); let _0x4de369 = _0x2508df[_0x2e760a(0x13e)](_0x2508df[_0x2e760a(0x18e)](_0x4f0f97)); if (_0x4de369 && _0x4de369[_0x2e760a(0x152)] > 0x0) { let _0x43e374 = frequenceSettingList_suzhou[0x2],
                        _0x5b15e3 = _0x138e4b['calculateCoordinate'](_0x43e374[_0x2e760a(0x17e)], _0x43e374['lngEnd'], _0x43e374[_0x2e760a(0x15f)], _0x43e374[_0x2e760a(0x192)], _0x4de369[0x0] / _0x43e374['totalLength']);
                    _0x434feb['push']([_0x5b15e3[_0x2e760a(0x182)], _0x5b15e3[_0x2e760a(0x12a)]]); } } } }), worker[_0x3c8e3d(0x178)]({ 'code': 'location', 'location': _0x434feb, 'type': _0x3c8e3d(0x179), 'timeStamp': _0x2e5ef6 }); }
worker[_0x105307(0x14b)](_0x5d8283 => { const _0x4d7a82 = _0x105307; switch (_0x5d8283[_0x4d7a82(0x18c)]) {
        case _0x4d7a82(0x18f):
            { let _0xb3b2cc = _0x5d8283[_0x4d7a82(0x176)],
                    _0x5cb951 = _0x138e4b['getSingleLeftFromArrayStatic'](_0xb3b2cc);oneDProcessThreeBeacon(_0x5cb951); break; }
        case 'frameBuffer1D':
            { let _0x3547ad = _0x5d8283[_0x4d7a82(0x176)],
                    _0x5051a4 = _0x138e4b[_0x4d7a82(0x12b)](_0x3547ad);oneDProcess(_0x5051a4); break; }
        case _0x4d7a82(0x186):
            { let _0x5f38d6 = _0x5d8283[_0x4d7a82(0x176)],
                    _0x146ed4 = _0x5d8283[_0x4d7a82(0x143)]['data'],
                    _0xb03050 = _0x138e4b[_0x4d7a82(0x12b)](_0x5f38d6),
                    _0x3a12c0 = [],
                    _0x1d9659 = acousticHeight; for (let _0x5e911f = 0x0; _0x5e911f < _0x146ed4[_0x4d7a82(0x152)]; _0x5e911f++) { _0x3a12c0[_0x4d7a82(0x185)]([..._0x146ed4[_0x5e911f], _0x1d9659]); }
                twoDProcess(_0xb03050, _0x3a12c0); break; }
        case _0x4d7a82(0x142):
            { let _0x17af8f = _0x5d8283[_0x4d7a82(0x176)],
                    _0x1b1e46 = _0x138e4b[_0x4d7a82(0x12b)](_0x17af8f);statidumProcess(_0x1b1e46); break; }
        case _0x4d7a82(0x17f):
            { let _0x30ddbd = _0x5d8283['data'],
                    _0x3a85ea = _0x138e4b[_0x4d7a82(0x12b)](_0x30ddbd);suzhouProcess(_0x3a85ea); break; }
        case _0x4d7a82(0x181):
            { let _0x4936f8 = _0x138e4b[_0x4d7a82(0x14c)](_0x5d8283[_0x4d7a82(0x176)]),
                    _0x57696b = _0x5d8283[_0x4d7a82(0x131)]; if (_0x57696b == _0x4d7a82(0x156)) oneDProcessThreeBeacon(_0x4936f8);
                else { if (_0x57696b == _0x4d7a82(0x139)) oneDProcess(_0x4936f8);
                    else { if (_0x57696b == '二维定位') { let _0x19e1a3 = _0x5d8283[_0x4d7a82(0x143)][_0x4d7a82(0x176)],
                                _0x182d3f = [],
                                _0x3982cc = acousticHeight; for (let _0x4fb8e2 = 0x0; _0x4fb8e2 < _0x19e1a3['length']; _0x4fb8e2++) { _0x182d3f[_0x4d7a82(0x185)]([..._0x19e1a3[_0x4fb8e2], _0x3982cc]); }
                            twoDProcess(_0x4936f8, _0x182d3f); } else { if (_0x57696b == _0x4d7a82(0x16a)) { statidumProcess(_0x4936f8); break; } else { if (_0x57696b == _0x4d7a82(0x13c)) { let _0x406460 = _0x138e4b[_0x4d7a82(0x18b)](_0x5d8283[_0x4d7a82(0x176)]);
                                    suzhouProcess(_0x406460); break; } } } } } break; }
        case 'updateSetting':
            let _0x1e87da = _0x5d8283['locType'];
            console['log'](_0x5d8283); if (_0x1e87da == _0x4d7a82(0x156) && _0x5d8283['beaconCluster1'] != null && _0x5d8283[_0x4d7a82(0x191)] != null) beaconCluster1[_0x4d7a82(0x17a)](_0x5d8283['beaconCluster1']), beaconCluster2[_0x4d7a82(0x17a)](_0x5d8283[_0x4d7a82(0x191)]), settings1 = _0x5d8283[_0x4d7a82(0x195)], settings2 = _0x5d8283[_0x4d7a82(0x191)], alpha = settings1[_0x4d7a82(0x13f)];
            else { if (_0x1e87da == _0x4d7a82(0x139) && _0x5d8283[_0x4d7a82(0x16d)] != null) beaconCluster1D[_0x4d7a82(0x17a)](_0x5d8283[_0x4d7a82(0x16d)]), settings1D = _0x5d8283[_0x4d7a82(0x16d)], alpha = settings1D[_0x4d7a82(0x13f)], imuSteps = settings1D['imuSteps'], imuMaxDrift = settings1D[_0x4d7a82(0x146)], acousticMaxDrift = settings1D['acousticMaxDrift'], acousticC64Flag = settings1D[_0x4d7a82(0x129)], acousticHeight = settings1D[_0x4d7a82(0x15c)];
                else { if (_0x1e87da == _0x4d7a82(0x162) && _0x5d8283[_0x4d7a82(0x141)] != null) beaconCluster2D[_0x4d7a82(0x17a)](_0x5d8283[_0x4d7a82(0x141)]), settings2D = _0x5d8283[_0x4d7a82(0x141)], alpha = settings2D[_0x4d7a82(0x13f)], imuSteps = settings2D[_0x4d7a82(0x130)], imuMaxDrift = settings2D[_0x4d7a82(0x146)], acousticMaxDrift = settings2D['acousticMaxDrift'], acousticC64Flag = settings2D[_0x4d7a82(0x129)], acousticHeight = settings2D[_0x4d7a82(0x15c)], acousticSmoothFlag = settings2D[_0x4d7a82(0x150)], acousticMapLimitFlag = settings2D[_0x4d7a82(0x159)], acousticImuStaticFlag = settings2D[_0x4d7a82(0x12d)], outputLocList = [], lastCoordinate = null;
                    else { if (_0x1e87da == _0x4d7a82(0x13c) && _0x5d8283['setting'] != null) { console[_0x4d7a82(0x140)](_0x4d7a82(0x13c), _0x5d8283[_0x4d7a82(0x153)]); let _0x2c7e81 = _0x5d8283['setting'][_0x4d7a82(0x175)];
                            alpha = _0x5d8283[_0x4d7a82(0x153)][_0x4d7a82(0x13f)], locationSettingList_suzhou = []; let _0x3b0ec1 = []; for (let _0x23da1a = 0x0; _0x23da1a < 0x4; _0x23da1a++) { _0x2c7e81[_0x23da1a][_0x4d7a82(0x152)] <= 0x2 && _0x2c7e81[_0x23da1a]['push'](1.5); let _0x13f816 = _0x2c7e81[_0x23da1a]['slice'](0x0);
                                _0x3b0ec1[_0x4d7a82(0x185)](_0x13f816); }
                            console[_0x4d7a82(0x140)]('location1', _0x3b0ec1), locationSettingList_suzhou[_0x4d7a82(0x185)](getLocationSetting(_0x3b0ec1)); let _0x58e06d = []; for (let _0x266bcf = 0x4; _0x266bcf < 0x8; _0x266bcf++) { _0x2c7e81[_0x266bcf][_0x4d7a82(0x152)] <= 0x2 && _0x2c7e81[_0x266bcf][_0x4d7a82(0x185)](1.5); let _0x180fbe = _0x2c7e81[_0x266bcf][_0x4d7a82(0x166)](0x0);
                                _0x58e06d[_0x4d7a82(0x185)](_0x180fbe); }
                            locationSettingList_suzhou['push'](getLocationSetting(_0x58e06d)), console[_0x4d7a82(0x140)]('locationSettingList_suzhou', locationSettingList_suzhou), frequenceSetting3_suzhou[_0x4d7a82(0x149)] = Math['abs'](_0x2c7e81[0x8][0x0] - _0x2c7e81[0x9][0x0]), frequenceSetting3_suzhou[_0x4d7a82(0x17e)] = _0x2c7e81[0x8][0x0], frequenceSetting3_suzhou[_0x4d7a82(0x138)] = _0x2c7e81[0x9][0x0], frequenceSetting3_suzhou[_0x4d7a82(0x15f)] = _0x2c7e81[0x8][0x1], frequenceSetting3_suzhou[_0x4d7a82(0x192)] = _0x2c7e81[0x9][0x1], frqDetectList_suzhou[0x2][_0x4d7a82(0x17a)](frequenceSetting3_suzhou); } } } } break;
        case _0x4d7a82(0x172):
            imuDataList['push'](_0x5d8283[_0x4d7a82(0x193)]), stepList = pdr['getSteps'](imuDataList, imuSteps, 9.8); let _0x3edc97 = pdr['getTrack'](stepList, startPosition, alpha); if (_0x3edc97['length'] > 0x5) { let _0x3f5688 = _0x3edc97[_0x3edc97['length'] - 0x5][_0x4d7a82(0x12f)],
                    _0x3172b0 = 0x0; for (let _0x2dc97a = 0x0; _0x2dc97a < imuDataList[_0x4d7a82(0x152)]; _0x2dc97a++) { imuDataList[_0x2dc97a][_0x4d7a82(0x12f)] <= _0x3f5688 && _0x3172b0++; }
                imuDataList[_0x4d7a82(0x16e)](0x0, _0x3172b0), startPosition = _0x3edc97[_0x3edc97['length'] - 0x5]; }
            track = []; for (let _0x53ca38 = Math[_0x4d7a82(0x12e)](_0x3edc97['length'] - 0x5, 0x0); _0x53ca38 < _0x3edc97[_0x4d7a82(0x152)]; _0x53ca38++) { track['push']([_0x3edc97[_0x53ca38]['x'], _0x3edc97[_0x53ca38]['y']]); }
            worker['postMessage']({ 'code': _0x4d7a82(0x15e), 'track': track }); break;
        case _0x4d7a82(0x135):
            _0x5d8283['dataType'] === _0x4d7a82(0x183) && (imuDataList[_0x4d7a82(0x185)](_0x5d8283[_0x4d7a82(0x193)]), stepList = pdr[_0x4d7a82(0x14d)](imuDataList, imuSteps, 9.8));
            _0x5d8283['dataType'] === _0x4d7a82(0x13a) && (aclocTrack[_0x4d7a82(0x185)](_0x5d8283[_0x4d7a82(0x165)]), startPosition[_0x4d7a82(0x12f)] === 0x0 && (startPosition[_0x4d7a82(0x12f)] = _0x5d8283[_0x4d7a82(0x165)][_0x4d7a82(0x12f)], startPosition['x'] = _0x5d8283['aclocPosition']['x'], startPosition['y'] = _0x5d8283[_0x4d7a82(0x165)]['y']));
            isStatic = pdr[_0x4d7a82(0x18d)](imuDataList, 0x1e); if (_0x5d8283[_0x4d7a82(0x190)]) { console[_0x4d7a82(0x140)](isStatic);
                isStatic || aclocTrack['length'] == 0x0 ? worker['postMessage']({ 'code': _0x4d7a82(0x173), 'track': [
                        [lastPosition['x'], lastPosition['y']]
                    ] }) : (lastPosition = aclocTrack[aclocTrack['length'] - 0x1], worker['postMessage']({ 'code': _0x4d7a82(0x173), 'track': [
                        [lastPosition['x'], lastPosition['y']]
                    ] })); break; }
            _0x5d8283[_0x4d7a82(0x145)] === _0x4d7a82(0x163) && (startPosition = _0x5d8283[_0x4d7a82(0x163)], stepList = [], imuDataList = [], aclocTrack = [], track = [], fakeAclocTrack = ![]); if (startPosition['timestamp'] === 0x0) break; let _0x4afe64 = fuse[_0x4d7a82(0x16b)](aclocTrack, stepList, alpha, 0x64, startPosition, imuMaxDrift);
            aclocTrack[_0x4d7a82(0x152)] === 0x0 && (_0x4afe64 = pdr[_0x4d7a82(0x148)](stepList, startPosition, alpha)); if (_0x4afe64[_0x4d7a82(0x152)] > 0x5) { let _0x104e46 = _0x4afe64[_0x4afe64[_0x4d7a82(0x152)] - 0x5][_0x4d7a82(0x12f)],
                    _0x2a91e2 = 0x0; for (let _0x56e051 = 0x0; _0x56e051 < imuDataList['length']; _0x56e051++) { imuDataList[_0x56e051][_0x4d7a82(0x12f)] <= _0x104e46 && _0x2a91e2++; }
                imuDataList[_0x4d7a82(0x16e)](0x0, _0x2a91e2), _0x2a91e2 = 0x0; for (let _0xe722d9 = 0x0; _0xe722d9 < aclocTrack[_0x4d7a82(0x152)]; _0xe722d9++) { aclocTrack[_0xe722d9][_0x4d7a82(0x12f)] <= _0x104e46 && _0x2a91e2++; }
                aclocTrack[_0x4d7a82(0x16e)](0x0, _0x2a91e2), startPosition = _0x4afe64[_0x4afe64[_0x4d7a82(0x152)] - 0x5], lastPosition = _0x4afe64[_0x4afe64['length'] - 0x1]; }
            track = []; for (let _0x53f0be = Math[_0x4d7a82(0x12e)](_0x4afe64['length'] - 0x1, 0x0); _0x53f0be < _0x4afe64[_0x4d7a82(0x152)]; _0x53f0be++) { track[_0x4d7a82(0x185)]([_0x4afe64[_0x53f0be]['x'], _0x4afe64[_0x53f0be]['y']]); }
            fakeAclocTrack && stepList['length'] > 0x0 && (aclocTrack[_0x4d7a82(0x152)] === 0x0 || aclocTrack[aclocTrack[_0x4d7a82(0x152)] - 0x1][_0x4d7a82(0x12f)] < stepList[stepList[_0x4d7a82(0x152)] - 0x1]['timestamp'] - 0x1f4) && (_0x4afe64['length'] > 0x0 ? aclocTrack[_0x4d7a82(0x185)]({ 'timestamp': new Date()['getTime'](), 'x': _0x4afe64[_0x4afe64[_0x4d7a82(0x152)] - 0x1]['x'], 'y': _0x4afe64[_0x4afe64[_0x4d7a82(0x152)] - 0x1]['y'], 'conf': 0x1 }) : aclocTrack[_0x4d7a82(0x185)]({ 'timestamp': new Date()['getTime'](), 'x': 0x0, 'y': 0x0, 'conf': 0x1 }));
            worker[_0x4d7a82(0x178)]({ 'code': 'fused-track', 'track': track }); break;
        default:
            break; } });

function getMaxAndIndex(_0xe18f75) { const _0x269b39 = _0x105307; if (!_0xe18f75 || _0xe18f75[_0x269b39(0x152)] == 0x0) return { 'index': -0x1, 'max': -0x1 }; let _0x3d5aea = 0x0,
        _0x4f7879 = _0xe18f75[0x0]; for (let _0x1d802e = 0x0; _0x1d802e < _0xe18f75[_0x269b39(0x152)]; _0x1d802e++) { _0xe18f75[_0x1d802e] > _0x4f7879 && (_0x4f7879 = _0xe18f75[_0x1d802e], _0x3d5aea = _0x1d802e); } return { 'index': _0x3d5aea, 'max': _0x4f7879 }; }

function getAbsMean(_0x1350a4) { const _0x167bd7 = _0x105307; let _0x3d514b = 0x0; for (let _0x33aa1f = 0x0; _0x33aa1f < _0x1350a4['length']; _0x33aa1f++) { _0x3d514b += Math[_0x167bd7(0x17d)](_0x1350a4[_0x33aa1f]); } let _0x48e7d4 = _0x3d514b / _0x1350a4[_0x167bd7(0x152)]; return _0x48e7d4; }

function getJudgedNumber(_0x56bf83, _0x2def92, _0x1a9c2f = 0x1) { const _0x5fb7ac = _0x105307; let _0x401cd9 = {},
        _0x460f70 = []; if (_0x1a9c2f == 0x1) signalFilterList[_0x5fb7ac(0x127)](_0xe59bd3 => { const _0x412439 = _0x5fb7ac; let _0x5a807f = new Array(_0x56bf83[_0x412439(0x152)]); for (let _0x5ed155 = 0x0; _0x5ed155 < _0x56bf83[_0x412439(0x152)]; _0x5ed155++) { _0x5a807f[_0x5ed155] = _0xe59bd3[_0x412439(0x16c)](_0x56bf83[_0x5ed155]); }
        _0x460f70[_0x412439(0x185)](_0x5a807f); });
    else _0x1a9c2f == 0x2 && chirpFilterList[_0x5fb7ac(0x127)](_0x10c0c5 => { const _0xadbd8 = _0x5fb7ac; let _0x5375fc = new Array(_0x56bf83[_0xadbd8(0x152)]); for (let _0x41e25 = 0x0; _0x41e25 < _0x56bf83[_0xadbd8(0x152)]; _0x41e25++) { _0x5375fc[_0x41e25] = _0x10c0c5['filter'](_0x56bf83[_0x41e25]); }
        _0x460f70[_0xadbd8(0x185)](_0x5375fc); }); let _0x1acb52 = []; for (let _0x29261f = 0x0; _0x29261f < _0x460f70[_0x5fb7ac(0x152)]; _0x29261f++) { _0x1acb52[_0x5fb7ac(0x185)](getAbsMean(_0x460f70[_0x29261f])); } let _0x43477c = getMaxAndIndex(_0x1acb52); return _0x401cd9[_0x5fb7ac(0x155)] = _0x43477c, _0x401cd9[_0x5fb7ac(0x15b)] = _0x1acb52, _0x401cd9[_0x5fb7ac(0x128)] = _0x460f70, _0x401cd9; }

function filterSignal_suzhou(_0xfc6800, _0x2f3085) { const _0x2ff3cc = _0x105307; let _0xb0ee0 = {},
        _0x1ae2c7 = []; return chirpFilterList_suzhou['forEach'](_0x3da1cc => { const _0x714982 = _0x4029; let _0x262550 = new Array(_0xfc6800[_0x714982(0x152)]); for (let _0x3c28a3 = 0x0; _0x3c28a3 < _0xfc6800[_0x714982(0x152)]; _0x3c28a3++) { _0x262550[_0x3c28a3] = _0xfc6800[_0x3c28a3]; }
        _0x1ae2c7['push'](_0x262550); }), _0xb0ee0[_0x2ff3cc(0x128)] = _0x1ae2c7, _0xb0ee0; }

function fract(_0x475b1e) { const _0xe5fefe = _0x105307; return _0x475b1e - Math[_0xe5fefe(0x17b)](_0x475b1e); }

function getLocationSetting(_0x1bc0ff) { const _0x2cb713 = _0x105307; let _0x8767b2 = [
        [0x64, -0x1],
        [0x64, -0x1],
        [0x64, -0x1]
    ]; for (let _0x449590 = 0x0; _0x449590 < _0x1bc0ff[_0x2cb713(0x152)]; _0x449590++) { let _0x55f3fd = _0x1bc0ff[_0x449590]; for (let _0x13ce7b = 0x0; _0x13ce7b < 0x3; _0x13ce7b++) { _0x8767b2[_0x13ce7b][0x0] = Math['min'](_0x8767b2[_0x13ce7b][0x0], _0x55f3fd[_0x13ce7b]), _0x8767b2[_0x13ce7b][0x1] = Math[_0x2cb713(0x12e)](_0x8767b2[_0x13ce7b][0x1], _0x55f3fd[_0x13ce7b]); } } let _0x4c488b = { 'period': 1.002, 'beaconsLocation': _0x1bc0ff, 'locations': _0x1bc0ff, 'xRange': _0x8767b2[0x0], 'yRange': _0x8767b2[0x1], 'zRange': _0x8767b2[0x2], 'totalLength': Math[_0x2cb713(0x12e)](_0x8767b2[0x0][0x1] - _0x8767b2[0x0][0x0], _0x8767b2[0x1][0x1] - _0x8767b2[0x1][0x0], _0x8767b2[0x2][0x1] - _0x8767b2[0x2][0x0]), 'lastCoordinate': null, 'radius': acousticMaxDrift, 'interval': 0.15, 'precision': 0.1 }; return _0x4c488b; }